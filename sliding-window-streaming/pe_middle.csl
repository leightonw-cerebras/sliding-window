param MEMCPYD2H_DATA_1: color;       // Color used for D2H memcpy transfer
param MEMCPYH2D_DATA_1: color;       // Color used for H2D memcpy transfer
param memcpyParams: comptime_struct; // Struct containing memcpy params

// This module is needed for memcpy infrastructure
const sys_mod = @import_module("<memcpy_multi/memcpy>", @concat_structs(memcpyParams, .{
     .MEMCPYD2H_1=MEMCPYD2H_DATA_1,
     .MEMCPYH2D_1=MEMCPYH2D_DATA_1
}));

const task1_color: color = @get_color(8);
const task2_color: color = @get_color(9);

param num_elems: u16;

param send_left_color: color;
param recv_left_color: color;
param send_right_color: color;
param recv_right_color: color;

var left_recv_arr = @zeros([num_elems]i32);
const left_recv_arr_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{num_elems} -> left_recv_arr[i] });

var right_recv_arr = @zeros([num_elems]i32);
const right_recv_arr_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{num_elems} -> right_recv_arr[i] });

const send_left_dsd = @get_dsd(fabout_dsd, .{.fabric_color = send_left_color, .extent = num_elems, .output_queue = 1});
const recv_left_dsd = @get_dsd(fabin_dsd,  .{.fabric_color = recv_left_color, .extent = num_elems, .input_queue = @get_input_queue(2)});

const send_right_dsd = @get_dsd(fabout_dsd, .{.fabric_color = send_right_color, .extent = num_elems, .output_queue = 3});
const recv_right_dsd = @get_dsd(fabin_dsd,  .{.fabric_color = recv_right_color, .extent = num_elems, .input_queue = @get_input_queue(4)});

task recv_task() void {
  @fmovs(left_recv_arr_dsd, recv_left_dsd, .{.async = true, .unblock = shuffle_and_send});
  @fmovs(right_recv_arr_dsd, recv_right_dsd, .{.async = true, .activate = shuffle_and_send});
}

task shuffle_and_send() void {
  @fmovs(send_left_dsd, right_recv_arr_dsd, .{.async = true});
  @fmovs(send_right_dsd, left_recv_arr_dsd, .{.async = true});
}

comptime {
  @bind_task(recv_task, task1_color);
  @activate(task1_color);

  @bind_task(shuffle_and_send, task2_color);
  @block(task2_color);

  @block(recv_left_color);
  @block(recv_right_color);
}
